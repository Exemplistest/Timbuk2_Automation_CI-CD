package org.timbuk2.connections;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.util.Properties;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.timbuk2.PageObjects.Timbuk2LandingPage;

import io.github.bonigarcia.wdm.WebDriverManager;

public class ConnectionsClass {
	public WebDriver driver;
	public static ThreadLocal<WebDriver> driverThread = new ThreadLocal<>();

	public WebDriver driverInitialization() throws IOException {

		Properties prop = new Properties();
		FileInputStream fis = new FileInputStream(
				"D:\\selenium_jmeter_workspace\\Timbuk2\\src\\main\\java\\org\\timbuk2\\globalresources\\GlobalResources.properties");
		prop.load(fis);
		String browserName = System.getProperty("browser") != null ? System.getProperty("browser")
				: prop.getProperty("browser");
		// String browserName = prop.getProperty("browser");

		if (browserName.contains("edge")) {
			//WebDriverManager.edgedriver().setup();
			System.setProperty("browser.edge.driver", "C:\\Users\\Nagendra Vellanki\\Downloads\\edgedriver_win64.exe");
			EdgeOptions options = new EdgeOptions();
			// options.addArguments("--headless");
			options.addArguments("--remote-allow-origins=*");
			driver = new EdgeDriver(options);
		}

		else if (browserName.equalsIgnoreCase("chrome")) {
			WebDriverManager.chromedriver().setup();
			driver = new ChromeDriver();

		} else if (browserName.equalsIgnoreCase("firefox")) {
			WebDriverManager.firefoxdriver().setup();
			driver = new FirefoxDriver();

		}
		driverThread.set(driver);
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(20));
		driver.manage().window().maximize();
		return driver;
	}

	public static String captureScreenshot(WebDriver driver, String screenshotName) throws IOException {
		driver = driverThread.get();
		if (driver == null) {
			throw new IllegalStateException("WebDriver is not initialized. Ensure driverThread.set(driver) is called.");
		}
		TakesScreenshot ts = (TakesScreenshot) driver;
		File source = ts.getScreenshotAs(OutputType.FILE);
		String destination = getScreenshotPath(screenshotName);
		FileUtils.copyFile(source, new File(destination));
		return destination;
	}

	private static String getScreenshotPath(String screenshotName) {
		Path screenshotPath = Paths.get(System.getProperty("user.dir"), "screenshots", screenshotName + ".png");
		return screenshotPath.toString();
	}

	// @BeforeTest(alwaysRun = true)
	public Timbuk2LandingPage launchApplication() throws IOException, InterruptedException {
		driver = driverInitialization();
		Timbuk2LandingPage landingPage = new Timbuk2LandingPage(driver);
		landingPage.goTo();
		return landingPage;
	}

//	@AfterTest(alwaysRun = true)
//	public void close() {
//		driver.close();
//	}
}